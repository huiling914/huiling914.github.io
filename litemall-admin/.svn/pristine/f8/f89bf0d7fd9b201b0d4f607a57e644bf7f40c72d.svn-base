<template>
  <div class="app-container">

    <!-- 查询和其他操作 -->
    <div class="filter-container">
      <el-input v-model="listQuery.goodsSn" clearable class="filter-item" style="width: 200px;" placeholder="请输入商品编号"/>
      <el-input v-model="listQuery.name" clearable class="filter-item" style="width: 200px;" placeholder="请输入商品名称"/>
      <el-button class="filter-item" type="primary" icon="el-icon-search" @click="handleFilter">查找</el-button>
      <el-button class="filter-item" type="primary" icon="el-icon-edit" @click="handleCreate">添加</el-button>
      <el-button :loading="downloadLoading" class="filter-item" type="primary" icon="el-icon-download" @click="handleDownload">导出</el-button>
    </div>

    <!-- 查询结果 -->
    <el-table v-loading="listLoading" :data="list" size="small" element-loading-text="正在查询中。。。" border fit highlight-current-row>

      <el-table-column type="expand">
        <template slot-scope="props">
          <el-form label-position="left" class="table-expand">
            <el-form-item label="宣传画廊">
              <img v-for="pic in props.row.gallery" :key="pic" :src="pic" class="gallery">
            </el-form-item>
            <el-form-item label="商品介绍">
              <span>{{ props.row.brief }}</span>
            </el-form-item>
            <!--<el-form-item label="商品单位">
              <span>{{ props.row.unit }}</span>
            </el-form-item>
            <el-form-item label="关键字">
              <span>{{ props.row.keywords }}</span>
            </el-form-item>
            <el-form-item label="类目ID">
              <span>{{ props.row.categoryId }}</span>
            </el-form-item>
            <el-form-item label="品牌商ID">
              <span>{{ props.row.brandId }}</span>
            </el-form-item>-->
          </el-form>
        </template>
      </el-table-column>

      <el-table-column align="center" label="商品ID" prop="id"/>

      <el-table-column align="center" min-width="100" label="商品名称" prop="name"/>

       <el-table-column align="center" min-width="100" label="所属商家" prop="brandName"/>

        <el-table-column align="center" min-width="100" label="商品简介" prop="brief"/>

      <el-table-column align="center" label="宣传图片">
        <template slot-scope="scope">
          <img v-for="pic in scope.row.gallery" :key="pic" :src="pic"  width="40">
        </template>
      </el-table-column>

      <el-table-column align="center" label="商品价格" prop="counterPrice"/>

    

      <el-table-column align="center" label="操作" width="200" class-name="small-padding fixed-width">
        <template slot-scope="scope">
          <el-button type="primary" size="mini" @click="handleUpdate(scope.row)">编辑</el-button>
          <el-button type="danger" size="mini" @click="handleDelete(scope.row)">删除</el-button>
        </template>
      </el-table-column>
    </el-table>

    <pagination v-show="total>0" :total="total" :page.sync="listQuery.page" :limit.sync="listQuery.limit" @pagination="getList" />

    <el-tooltip placement="top" content="返回顶部">
      <back-to-top :visibility-height="100" />
    </el-tooltip>

       <!-- 添加或修改对话框 -->
    <el-dialog :title="textMap[dialogStatus]" :visible.sync="dialogFormVisible">
      <el-form ref="dataForm" :rules="rules" :model="dataForm" status-icon label-position="left" label-width="100px" style="width: 400px; margin-left:50px;">
        <el-form-item  v-if="dataForm.id" label="商品ID" prop="id">
          <el-input readonly="true" v-model="dataForm.id"/>
        </el-form-item>
         <el-form-item v-if="this.isCreat" label="商品编号" prop="goodsSn">
          <el-input v-model="dataForm.goodsSn"/>
        </el-form-item>
        <el-form-item label="商品名称" prop="name">
          <el-input v-model="dataForm.name"/>
        </el-form-item>
        <el-form-item label="所属商家ID" prop="brandNId">
          <el-input v-model="dataForm.brandId"/>
        </el-form-item>
       
        <el-form-item label="商品简介" prop="brief">
          <el-input v-model="dataForm.brief"/>
        </el-form-item>
        <el-form-item label="商品价格" prop="counterPrice">
          <el-input v-model="dataForm.counterPrice"/>
        </el-form-item>
        <!--<el-form-item label="宣传图片" >
          <template slot-scope="scope">
          <img v-for="pic in scope.dataForm.row.gallery" :key="pic" :src="pic"  width="40">
        </template>
              -->             
           <img v-if="dataForm.logoUrl"  :src="dataForm.logoUrl" class="avatar">
           <el-upload
                 class="upload-demo"
                 ref="upload"
                 :headers="headers"
                 :with-credentials="true"
                 :limit="5"
                 :file-list="fileList"
                 action="111"
                 :before-upload="beforeUpload"
                 :on-success="handleAvatarSuccess"
                 :on-remove="handleRemove"
                 :auto-upload="false"
                 list-type="picture">
              <el-button slot="trigger" size="small" type="primary">选取文件</el-button>
              <el-button style="margin-left: 10px;" size="small" type="success" @click="submitUpload">上传到服务器</el-button>
              <div slot="tip" class="el-upload__tip">只能上传jpg/png文件，且不超过500kb</div>
           </el-upload>
         <!-- <el-upload
            :headers="headers"
            :action="uploadPath"
            :show-file-list="false"
            :on-success="uploadPicUrl"
            class="avatar-uploader"
            accept=".jpg,.jpeg,.png,.gif">
            <img v-if="dataForm.picUrl" :src="dataForm.picUrl" class="avatar">
            <i v-else class="el-icon-plus avatar-uploader-icon"/>
          </el-upload>-->
        </el-form-item>
      </el-form>
      <div slot="footer" class="dialog-footer">
        <el-button @click="dialogFormVisible = false">取消</el-button>
        <el-button v-if="dialogStatus=='create'" type="primary" @click="createData">确定</el-button>
        <el-button v-else type="primary" @click="updateData">确定</el-button>
      </div>
    </el-dialog>

  </div>
</template>

<style>
  .table-expand {
    font-size: 0;
  }
  .table-expand label {
    width: 100px;
    color: #99a9bf;
  }
  .table-expand .el-form-item {
    margin-right: 0;
    margin-bottom: 0;
  }
  .gallery {
    width: 80px;
    margin-right: 10px;
  }
</style>

<script>
import { listGoods, deleteGoods,publishGoods,editGoods } from '@/api/goods'
import BackToTop from '@/components/BackToTop'
import Pagination from '@/components/Pagination' // Secondary package based on el-pagination

export default {
  name: 'GoodsList',
  components: { BackToTop, Pagination },
  data() {
    return {
      isCreat:true,
      list: [],
      total: 0,
      listLoading: true,
      listQuery: {
        page: 1,
        limit: 20,
        goodsSn: undefined,
        name: undefined,
        sort: 'add_time',
        order: 'desc'
      },
      goodsDetail: '',
      detailDialogVisible: false,
      downloadLoading: false,
      dataForm: {
        id: undefined,
        goodsSn:undefined,
        name: '',
        brief: '',
        brandId:'',
        counterPrice: undefined,
      },
            dialogStatus: '',

        dialogFormVisible: false,
         textMap: {
        update: '编辑',
        create: '创建'
      },
      deletelist:[]
   }
  },
  created() {
    this.getList()
  },
  methods: {
    getList() {
      this.listLoading = true
      listGoods(this.listQuery).then(response => {
        console.log(response)
        this.list = response.data.data.items
        this.total = response.data.data.total
        this.listLoading = false
      }).catch(() => {
        this.list = []
        this.total = 0
        this.listLoading = false
      })
    },
    handleFilter() {
      this.listQuery.page = 1
      this.getList()
    },
    resetForm(){
  this.dataForm={
        id: undefined,
        name: '',
        goodsSn:undefined,
        brief: '',
        brandId:'',
        counterPrice: undefined,
      }
    },
    handleCreate() {
      this.isCreat=true
      //this.$router.push({ path: '/goods/create' })
      this.resetForm()
       this.dialogStatus = 'create'
      this.dialogFormVisible = true
      this.$nextTick(() => {
        this.$refs['dataForm'].clearValidate()
      })
    },
    createData() {
      console.log(this.dataForm)
      this.$refs['dataForm'].validate(valid => {
        if (valid) {
          publishGoods(this.dataForm)
            .then(response => {
              console.log(2222)
              this.list.unshift(response.data.data)
              this.dialogFormVisible = false
              this.$notify.success({
                title: '成功',
                message: '创建成功'
              })
              this.resetForm()
            })
            .catch(response => {
              this.$notify.error({
                title: '失败',
                message: response.data.errmsg
              })
            })
        }
      })
    },
    handleUpdate(row) {
      this.isCreat=false
       //this.resetForm()
      //this.$router.push({ path: '/goods/edit', query: { id: row.id }})
      // this.dataForm = Object.assign({}, row)
      this.dataForm.id=row.id
      this.dataForm.name=row.name
      this.dataForm.brief=row.brief
      this.dataForm.counterPrice=row.counterPrice
      this.dataForm.brandId=row.brandId
      this.dialogStatus = 'update'
      this.dialogFormVisible = true
      this.$nextTick(() => {
        this.$refs['dataForm'].clearValidate()
      })
    },
    updateData() {
      console.log(this.dataForm)
      this.$refs['dataForm'].validate(valid => {
        if (valid) {
          editGoods(this.dataForm)
            .then(() => {
              for (const v of this.list) {
                if (v.id === this.dataForm.id) {
                  const index = this.list.indexOf(v)
                  this.list.splice(index, 1, this.dataForm)
                  break
                }
              }
              this.dialogFormVisible = false
              this.$notify.success({
                title: '成功',
                message: '更新成功'
              })
            })
            .catch(response => {
              this.$notify.error({
                title: '失败',
                message: response.data.errmsg
              })
            })
        }
      })
    },
    showDetail(detail) {
      this.goodsDetail = detail
      this.detailDialogVisible = true
    },
    handleDelete(row) {
      this.deletelist.push(row.id)
      deleteGoods(this.deletelist).then(response => {
        this.$notify.success({
          title: '成功',
          message: '删除成功'
        })
        const index = this.list.indexOf(row)
        this.list.splice(index, 1)
      }).catch(response => {
        this.$notify.error({
          title: '失败',
          message: response.data.errmsg
        })
      })
    },
    handleDownload() {
      this.downloadLoading = true
      import('@/vendor/Export2Excel').then(excel => {
        const tHeader = ['商品ID', '商品名称', '所属商家', '商品简介', '商品价格']
        const filterVal = ['id', 'name', 'brandName', 'brief', 'counterPrice']
        excel.export_json_to_excel2(tHeader, this.list, filterVal, '商品信息')
        this.downloadLoading = false
      })
    }
  }
}
</script>
