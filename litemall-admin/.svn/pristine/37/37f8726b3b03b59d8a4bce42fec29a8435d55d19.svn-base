<template>
    <div class="app-container">

        <!-- 查询和其他操作 -->
        <div class="filter-container">
            <el-input v-model="listQuery.id" clearable class="filter-item" style="width: 200px;" placeholder="请输入课程ID"/>
            <el-input v-model="listQuery.name" clearable class="filter-item" style="width: 200px;"
                      placeholder="请输入课程名称"/>
            <el-button v-permission="['GET /admin/brand/list']" class="filter-item" type="primary" icon="el-icon-search"
                       @click="handleFilter">查找
            </el-button>
            <el-button v-if="listQuery.schoolId==undefined" v-permission="['POST /admin/brand/create']"
                       class="filter-item" type="primary" icon="el-icon-edit" @click="handleCreate" disabled>添加
            </el-button>
            <el-button v-else v-permission="['POST /admin/brand/create']" class="filter-item" type="primary"
                       icon="el-icon-edit" @click="handleCreate">添加
            </el-button>
            <!-- <el-button :loading="downloadLoading" class="filter-item" type="primary" icon="el-icon-download" @click="handleDownload">导出</el-button> -->
        </div>

        <!-- 查询结果 -->
        <div style="height: calc(100% - 155px);overflow: hidden">
            <el-table v-loading="listLoading" :data="list" size="small" element-loading-text="正在查询中。。。" border fit
                      highlight-current-row height="100%">

                <el-table-column align="center" label="课程ID" prop="id"/>

                <el-table-column align="center" label="课程名称" prop="name"/>
                <el-table-column align="center" label="上课时间" prop="timeDescription"/>
                <el-table-column align="center" label="课程老师" prop="teachers"/>
                <el-table-column align="center" label="课程专柜价格" prop="counterPrice"/>
                <el-table-column align="center" label="课程专柜价格" prop="retailPrice"/>
                <el-table-column align="center" label="所属学校" prop="schoolName"/>
                <!--  <el-table-column align="center" property="picUrl" label="学校图片">
                   <template slot-scope="scope">
                     <img v-if="scope.row.picUrl" :src="scope.row.picUrl" width="80">
                   </template>
                 </el-table-column> -->


                <el-table-column align="center" label="操作" width="200" class-name="small-padding fixed-width">
                    <template slot-scope="scope">
                        <el-button v-permission="['POST /admin/brand/update']" type="primary" size="mini"
                                   @click="handleUpdate(scope.row)">编辑
                        </el-button>
                        <el-button v-permission="['POST /admin/brand/delete']" type="danger" size="mini"
                                   @click="deleteClass(scope.row.id)">删除
                        </el-button>
                    </template>
                </el-table-column>
            </el-table>
        </div>

        <pagination v-show="total>0" :total="total" :page.sync="listQuery.page" :limit.sync="listQuery.limit"
                    @pagination="getList"/>

        <!-- 添加或修改对话框 -->
        <el-dialog :title="textMap[dialogStatus]" :visible.sync="dialogFormVisible" :top="'0'">
            <el-form ref="dataForm" :rules="rules" :model="dataForm" status-icon label-position="left"
                     label-width="100px" style="width: 400px; margin-left:50px;">
                <el-form-item label="课程名称" prop="name">
                    <el-input v-model="dataForm.name"/>
                </el-form-item>
                <el-form-item label="开始时间" prop="startTime">
                    <el-date-picker
                        v-model="dataForm.startTime"
                        type="datetime"
                        value-format="yyyy-MM-dd HH:mm:ss"
                        placeholder="选择日期时间">
                    </el-date-picker>
                </el-form-item>
                <el-form-item label="结束时间" prop="endTime">
                    <el-date-picker
                        v-model="dataForm.endTime"
                        type="datetime"
                        value-format="yyyy-MM-dd HH:mm:ss"
                        placeholder="选择日期时间">
                    </el-date-picker>
                </el-form-item>
                <el-form-item label="上课时间" prop="timeDescription">
                    <el-input v-model="dataForm.timeDescription"/>
                </el-form-item>
                <el-form-item label="课程老师" prop="teacherIds">
                    <el-select v-model="dataForm.teacherIds" multiple placeholder="请选择">
                        <el-option
                            v-for="item in teacherList"
                            :key="item.id"
                            :label="item.name"
                            :value="item.id">
                        </el-option>
                    </el-select>
                </el-form-item>
                <el-form-item label="课程专柜价格" prop="counterPrice">
                    <el-input v-model="dataForm.counterPrice"/>
                </el-form-item>
                <el-form-item label="课程零售价格" prop="retailPrice">
                    <el-input v-model="dataForm.retailPrice"/>
                </el-form-item>
                <el-form-item label="开课人数" prop="maxStudent">
                    <el-input v-model="dataForm.maxStudent"/>
                </el-form-item>
                <el-form-item label="介绍" prop="description">
                    <el-input v-model="dataForm.description"/>
                </el-form-item>
                <el-form-item label="课程列表图">
                    <img v-if="dataForm.pictureUrl" :src="uploadHeaderPath+dataForm.pictureUrl" class="logo">
                    <el-upload
                        class="upload-uploader"
                        ref="upload1"
                        :headers="headers"
                        :limit="1"
                        :file-list="fileList"
                        action="111"
                        :http-request="uploadFile1"
                        :auto-upload="false"
                        list-type="picture">
                        <el-button slot="trigger" size="small" type="primary">选取文件</el-button>
                        <el-button style="margin-left: 10px;" size="small" type="success" @click="submitUpload1">
                            上传到服务器
                        </el-button>
                    </el-upload>
                </el-form-item>
                <el-form-item label="课程多张图">
                    <ul>
                        <li v-for="(item,index) in dataForm.detailPictures" v-if="item.picUrl">
                            <div class="picDiv"><img v-if="item.picUrl" :key="item.picId"
                                                     :src="uploadHeaderPath+item.picUrl"
                                                     class="pics">
                                <el-button class="delete" type="danger" icon="el-icon-delete" circle
                                           @click="deletePic(index,item.picId)"></el-button>
                            </div>
                        </li>
                    </ul>
                    <el-upload
                        class="upload-uploader"
                        ref="upload2"
                        :headers="headers"
                        multiple
                        :limit="5"
                        :file-list="fileList"
                        action="111"
                        :http-request="uploadFile2"
                        :auto-upload="false"
                        list-type="picture">
                        <el-button slot="trigger" size="small" type="primary">选取文件</el-button>
                        <el-button style="margin-left: 10px;" size="small" type="success" @click="submitUpload2">
                            上传到服务器
                        </el-button>
                    </el-upload>
                </el-form-item>
                <!-- <el-form-item label="品牌商图片" prop="picUrl">
                  <el-upload
                    :headers="headers"
                    :action="uploadPath"
                    :show-file-list="false"
                    :on-success="uploadPicUrl"
                    class="avatar-uploader"
                    accept=".jpg,.jpeg,.png,.gif">
                    <img v-if="dataForm.picUrl" :src="dataForm.picUrl" class="avatar">
                    <i v-else class="el-icon-plus avatar-uploader-icon"/>
                  </el-upload>
                </el-form-item> -->

            </el-form>
            <div slot="footer" class="dialog-footer">
                <el-button @click="dialogFormVisible = false">取消</el-button>
                <el-button v-if="dialogStatus=='create'" type="primary" @click="addClass">确定</el-button>
                <el-button v-else type="primary" @click="updateClass">确定</el-button>
            </div>
        </el-dialog>

    </div>
</template>

<style>
    .avatar-uploader .el-upload {
        border: 1px dashed #d9d9d9;
        border-radius: 6px;
        cursor: pointer;
        position: relative;
        overflow: hidden;
    }

    .avatar-uploader .el-upload:hover {
        border-color: #20a0ff;
    }

    .avatar-uploader-icon {
        font-size: 28px;
        color: #8c939d;
        width: 120px;
        height: 120px;
        line-height: 120px;
        text-align: center;
    }

    .avatar {
        width: 145px;
        height: 145px;
        display: block;
    }

    .picDiv {
        position: relative;
    }

    ul {
        padding-left: 0px;
    }

    ul li {
        list-style-type: none;
        display: inline-block;
    }

    ul li .pics {
        width: 145px;
        height: 145px;
        display: block;
    }

    ul li .delete {
        position: absolute;
        top: 55px;
        margin-left: 55px;
        background: red;
        display: block;
        opacity: 0.1;
    }

    .delete:hover {
        display: block;
        opacity: 1;
    }

    .logo {
        width: 145px;
        height: 145px;
        display: block;
    }
</style>

<script>
    import {listBrand, createBrand, updateBrand, deleteBrand} from '@/api/brand'
    import {uploadPath, uploadHeaderPath} from '@/api/storage'
    import {getToken} from '@/utils/auth'
    import Pagination from '@/components/Pagination' // Secondary package based on el-pagination
    import {listClass, AddClass, UpdateClass, DeleteClass, listTeacher,classDetail} from '@/api/school'
    import {uploadClassIcon, uploadClassDetailPic} from '@/api/fileUpload'

    export default {
        name: 'Class',
        components: {Pagination},
        data() {
            return {
                uploadPath,
                uploadHeaderPath,
                list: undefined,
                teacherList: undefined,
                total: 0,
                listLoading: true,
                listQuery: {
                    page: 1,
                    limit: 20,
                    id: undefined,
                    schoolId: undefined,
                    name: undefined,
                    sort: undefined,
                    order: undefined
                },
                listQuery1: {
                    schoolId: undefined,
                },

                deletedInfo: {
                    classIds: []
                },
                teacherIds:[],
                dataForm: {
                    id: undefined,
                    name: '',
                    schoolId: undefined,
                    description: '',
                    startTime: '',
                    endTime: '',
                    timeDescription: undefined,
                    counterPrice: undefined,
                    retailPrice: undefined,
                    maxStudent: undefined,
                    //teacherIds: undefined,
                    status: 0,
                    updateList: [],
                    uploadList: [],
                    deleteList: [],
                    detailPictures: []
                },
                dialogFormVisible: false,
                dialogStatus: '',
                textMap: {
                    update: '编辑',
                    create: '创建'
                },
                rules: {
                    name: [
                        {required: true, message: '课程名称不能为空', trigger: 'blur'}
                    ]
                },
                downloadLoading: false,
                fileList: []
            }
        },
        computed: {
            headers() {
                return {
                    'X-Litemall-Admin-Token': getToken()
                }
            }
        },
        created() {
            this.listQuery.schoolId = this.$route.params.schoolId;
            this.listQuery1.schoolId = this.$route.params.schoolId;
            this.getList();
            if(this.listQuery1.schoolId!=undefined){
                this.getTeacherList(this.listQuery1);
            }
            
        },
        watch:{
          'listQuery.id':function(val,oldVal){
            if(!val){
              this.getList()
            }
          },
          'listQuery.name':function(val,oldVal){
            if(!val){
              this.getList()
            }
          }
          
        },
        methods: {
            getList() {
                this.listLoading = true
                listClass(this.listQuery)
                .then(response => {
                    console.log(response)
                    this.list = response.data.data.items
                    for (var i = 0; i < this.list.length; i++) {
                        this.list[i]['teachers'] = '';
                        this.list[i]['teacherIds'] = []
                        for (var j = 0; j < this.list[i]['litemallTeacherList'].length; j++) {
                            if (this.list[i]['litemallTeacherList'][j] != null) {
                                this.list[i]['teachers'] = this.list[i]['teachers'] + this.list[i]['litemallTeacherList'][j].name + ' ';
                                this.list[i]['teacherIds'].push(this.list[i]['litemallTeacherList'][j].id)
                            }

                        }
                        //console.log('22'+this.list[i]['teachers']);
                        //  if(this.list[i].detailPictures){
                        //    //console.log('aaaa')
                        //  for (var j=0;j<this.list[i].detailPictures.length;j++) {
                        //      if(this.list[i].detailPictures[j].picUrl.substr(0,4)!='http'){
                        //      this.list[i].detailPictures[j].picUrl=uploadHeaderPath+this.list[i].detailPictures[j].picUrl
                        //   }
                        //  }
                        // }
                    }
                    this.total = response.data.data.total
                    this.listLoading = false
                })
                .catch(() => {
                    this.list = []
                    this.total = 0
                    this.listLoading = false
                })
            },
            uploadFile1(file) {
                this.fileData1.append('iconFile', file.file);
                console.log(this.fileData1.get("iconFile"))
            },
            submitUpload1() {
                this.fileData1 = new FormData();
                this.$refs.upload1.submit();
                var self = this
                uploadClassIcon(this.fileData1).then(function (response) {
                    self.$refs.upload1.clearFiles();
                    self.$message({
                        message: '上传成功',
                        type: 'success'
                    });
                    //self.dataForm.logoUrl=uploadHeaderPath+response.data.data[0]
                    self.dataForm.pictureUrl = response.data.data[0]
                    //console.log(response.data.data[0])
                    //self.uploadlogoUrl=response.data.data[0]
                    //console.log(self.dataForm.logoUrl)
                })
                .catch(function (error) {
                    console.log(error);
                })
            },
            uploadFile2(file) {
                this.fileData2.append('fileList', file.file)
            },
            //确定上传
            submitUpload2() {
                this.fileData2 = new FormData();
                var self = this
                this.$refs.upload2.submit();
                uploadClassDetailPic(this.fileData2).then(function (response) {
                    self.$refs.upload2.clearFiles();
                    console.log(response)
                    for (var key in response.data.data) {
                        self.dataForm.uploadList.push({'id': null, 'url': response.data.data[key]})
                        self.dataForm.detailPictures.push({'id': null, 'picUrl': response.data.data[key]})
                        console.log(self.dataForm.detailPictures)
                    }
                    // for(var i in self.dataForm.detailPictures){
                    //       if(self.dataForm.detailPictures[i].picUrl.substr(0,4)!='http'){
                    //         self.dataForm.detailPictures[i].picUrl=uploadHeaderPath+self.dataForm.detailPictures[i].picUrl
                    //           }
                    //       }
                    self.$message({
                        message: '上传成功',
                        type: 'success'
                    })
                })
                .catch(function (error) {
                    console.log(error);
                })
            },


            //删除图片
            deletePic(index, picId) {
                this.dataForm.detailPictures.splice(index, 1)
                this.dataForm.deleteList.push(picId)
            },
            getTeacherList(params) {
                //this.listLoading = true
                listTeacher(params)
                .then(response => {
                    this.teacherList = response.data.data.items
                    //this.total = response.data.data.total
                    //this.listLoading = false
                })
                .catch(() => {
                    this.teacherList = []
                    //this.total = 0
                    //this.listLoading = false
                })
            },
            addClass() {
                this.dataForm.schoolId = this.$route.params.schoolId;
                AddClass(this.dataForm).then((response) => {
                    //this.list.unshift(response.data.data.items)
                    this.getList();
                    this.dialogFormVisible = false
                    this.$notify.success({
                        title: '成功',
                        message: '创建成功'
                    })
                }).catch((error) => {
                    this.$notify.error({
                        title: '失败',
                        message: response.data.errmsg
                    })
                })
            },
            updateClass() {
                //this.dataForm['teacherIds']=this.teacherIds
                UpdateClass(this.dataForm).then((response) => {
                    // for (const v of this.list) {
                    //   if (v.id === this.dataForm.id) {
                    //     const index = this.list.indexOf(v)
                    //     this.list.splice(index, 1, this.dataForm)
                    //     break
                    //   }
                    // }
                    this.getList();
                    this.dialogFormVisible = false
                    this.$notify.success({
                        title: '成功',
                        message: '更新成功'
                    })
                }).catch((error) => {
                    this.$notify.error({
                        title: '失败',
                        message: response.data.errmsg
                    })
                })
            },
            deleteClass(id) {
                this.deletedInfo.classIds[0] = id
                DeleteClass(this.deletedInfo).then((response) => {
                    this.$notify.success({
                        title: '成功',
                        message: '删除成功'
                    })
                    // const index = this.list.indexOf(row)
                    // this.list.splice(index, 1)
                    this.getList();
                }).catch((error) => {
                    this.$notify.error({
                        title: '失败',
                        message: response.data.errmsg
                    })
                })
            },
            handleFilter() {
                this.listQuery.page = 1
                this.getList()
            },
            resetForm() {
                this.dataForm = {
                    id: undefined,
                    name: '',
                    schoolId: undefined,
                    description: '',
                    startTime: '',
                    endTime: '',
                    timeDescription: undefined,
                    counterPrice: undefined,
                    retailPrice: undefined,
                    maxStudent: undefined,
                    teacherIds: [],
                    status: 0,
                    updateList: [],
                    uploadList: [],
                    deleteList: [],
                    detailPictures: []
                }
            },
            handleCreate() {
                this.resetForm()
                console.log(this.dataForm)
                this.dialogStatus = 'create'
                this.dialogFormVisible = true
                this.$nextTick(() => {
                    this.$refs['dataForm'].clearValidate()
                })
            },
            uploadPicUrl: function (response) {
                this.dataForm.picUrl = response.data.url
            },
            createData() {
                this.$refs['dataForm'].validate(valid => {
                    if (valid) {
                        createBrand(this.dataForm)
                        .then(response => {
                            this.list.unshift(response.data.data)
                            this.dialogFormVisible = false
                            this.$notify.success({
                                title: '成功',
                                message: '创建成功'
                            })
                        })
                        .catch(response => {
                            this.$notify.error({
                                title: '失败',
                                message: response.data.errmsg
                            })
                        })
                    }
                })
            },
            handleUpdate(row) {
                this.dataForm = Object.assign({}, row)
                classDetail(row.id).then((response)=>{
                    this.dataForm.detailPictures=response.data.data.detailPictures
                    //console.log(response.data.data)
                    //console.log(this.dataForm)
                    this.listQuery1.schoolId=this.dataForm.schoolId
                    //console.log(this.listQuery1)
                    this.getTeacherList(this.listQuery1)
                    //console.log(this.teacherList)
                    //this.teacherIds=row.teacherIds
                    // if(this.dataForm.litemallTeacherList){
                    //     //this.dataForm.teacherIds = [];
                    //    for(var i=0;i<this.dataForm.litemallTeacherList.length;i++){
                    //     this.dataForm.teacherIds.push(this.dataForm.litemallTeacherList[i].id)
                    //    }  
                    // }
               //console.log(this.dataForm)
                //this.dataForm = Object.assign({}, row)
                    
                    if (!this.dataForm.detailPictures) {
                        this.dataForm.detailPictures = []
                    }
                
                    this.dataForm.deleteList = []
                    this.dataForm.uploadList = []
                    this.dialogStatus = 'update'
                    this.dialogFormVisible = true
                    console.log(this.dataForm)
                    
                }).catch((error)=>{
                    console.log(error)
                })
                //console.log(this.dataForm.litemallTeacherList)
                
                
                // this.$nextTick(() => {
                //     this.$refs['dataForm'].clearValidate()
                // })
            },
            updateData() {
                this.$refs['dataForm'].validate(valid => {
                    if (valid) {
                        updateBrand(this.dataForm)
                        .then(() => {
                            for (const v of this.list) {
                                if (v.id === this.dataForm.id) {
                                    const index = this.list.indexOf(v)
                                    this.list.splice(index, 1, this.dataForm)
                                    break
                                }
                            }
                            this.dialogFormVisible = false
                            this.$notify.success({
                                title: '成功',
                                message: '更新成功'
                            })
                        })
                        .catch(response => {
                            this.$notify.error({
                                title: '失败',
                                message: response.data.errmsg
                            })
                        })
                    }
                })
            },
            handleDelete(row) {
                deleteBrand(row)
                .then(response => {
                    this.$notify.success({
                        title: '成功',
                        message: '删除成功'
                    })
                    // const index = this.list.indexOf(row)
                    // this.list.splice(index, 1)
                    this.getList();
                })
                .catch(response => {
                    this.$notify.error({
                        title: '失败',
                        message: response.data.errmsg
                    })
                })
            },
            handleDownload() {
                this.downloadLoading = true
                import('@/vendor/Export2Excel').then(excel => {
                    const tHeader = [
                        '品牌商ID',
                        '品牌商名称',
                        '介绍',
                        '低价',
                        '品牌商图片'
                    ]
                    const filterVal = ['id', 'name', 'desc', 'floorPrice', 'picUrl']
                    excel.export_json_to_excel2(
                        tHeader,
                        this.list,
                        filterVal,
                        '品牌商信息'
                    )
                    this.downloadLoading = false
                })
            }
        }
    }
</script>
