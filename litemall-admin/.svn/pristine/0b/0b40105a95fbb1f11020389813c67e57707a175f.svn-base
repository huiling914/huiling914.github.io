<template>
  <div class="app-container">

    <!-- 查询和其他操作 -->
    <div class="filter-container">
      <el-input v-model="listQuery.id" clearable class="filter-item" style="width: 200px;" placeholder="请输入商家ID"/>
      <el-input v-model="listQuery.name" clearable class="filter-item" style="width: 200px;" placeholder="请输入商家名称"/>
       <el-select v-model="listQuery.types"  style="width: 200px" class="filter-item" placeholder="请选择商家类别">
        <el-option v-for="(key, value) in typeMap" :key="key" :label="key" :value="value"/>
      </el-select>
      <el-button v-permission="['GET /admin/brand/list']" class="filter-item" type="primary" icon="el-icon-search" @click="handleFilter">查找</el-button>
      <el-button v-permission="['POST /admin/brand/create']" class="filter-item" type="primary" icon="el-icon-edit" @click="handleCreate">添加</el-button>
      <el-button :loading="downloadLoading" class="filter-item" type="primary" icon="el-icon-download" @click="handleDownload">导出</el-button>
    </div>

    <!-- 查询结果 -->
    <el-table v-loading="listLoading" :data="list" size="small" element-loading-text="正在查询中。。。" border fit highlight-current-row>

      <el-table-column align="center" label="商家ID" prop="id"/>

      <el-table-column align="center" label="商家名称" prop="name"/>

    <!--  <el-table-column align="center" property="picUrl" label="品牌商图片">
        <template slot-scope="scope">
          <img v-if="scope.row.picUrl" :src="scope.row.picUrl" width="80">
        </template>
      </el-table-column>
-->
      <el-table-column align="center" min-width="250px" label="商家简介" prop="desc"/>

      <el-table-column align="center" :formatter="formatterColumn" label="商家类型" prop="type"/>
        

      <el-table-column align="center" label="营业时间" prop="openTime"/>

      <el-table-column align="center" label="联系方式1" min-width="100px" prop="phoneNumPrimary"/>

      <el-table-column align="center" label="联系方式2" min-width="100px" prop="phoneNumSecond"/>


      <el-table-column align="center" label="地址" min-width="100px" prop="address"/>

      <el-table-column align="center" label="操作" width="200" class-name="small-padding fixed-width">
        <template slot-scope="scope">
          <el-button v-permission="['POST /admin/brand/update']" type="primary" size="mini" @click="handleUpdate(scope.row)">编辑</el-button>
          <el-button v-permission="['POST /admin/brand/delete']" type="danger" size="mini" @click="handleDelete(scope.row)">删除</el-button>
        </template>
      </el-table-column>
    </el-table>

    <pagination v-show="total>0" :total="total" :page.sync="listQuery.page" :limit.sync="listQuery.limit" @pagination="getList" />

    <!-- 添加或修改对话框 -->
    <el-dialog :title="textMap[dialogStatus]" :visible.sync="dialogFormVisible">
      <el-form ref="dataForm" :rules="rules" :model="dataForm" status-icon label-position="left" label-width="100px" style="width: 400px; margin-left:50px;">
         <el-form-item label="商家ID" prop="name">
          <el-input v-model="dataForm.id"/>
        </el-form-item>
        <el-form-item label="商家名称" prop="name">
          <el-input v-model="dataForm.name"/>
        </el-form-item>
        <el-form-item label="商家简介" prop="desc">
          <el-input v-model="dataForm.desc"/>
        </el-form-item>
        <el-form-item label="商家类型" prop="type">
           <el-select v-model="dataForm.type" placeholder="请选择">
            <el-option :value="0" label="健康"/>
            <el-option :value="1" label="时尚"/>
            <el-option :value="2" label="服饰"/>
            <el-option :value="3" label="乐器"/>
            <el-option :value="4" label="饮食"/>
          </el-select>
        </el-form-item>
        <el-form-item label="营业时间" prop="openTime">
          <el-input v-model="dataForm.openTime"/>
        </el-form-item>
        <el-form-item label="联系方式1" prop="phoneNumPrimary">
          <el-input v-model="dataForm.phoneNumPrimary"/>
        </el-form-item>
        <el-form-item label="联系方式2" prop="phoneNumSecond">
          <el-input v-model="dataForm.phoneNumSecond"/>
        </el-form-item>
        <el-form-item label="地址" prop="address">
          <el-input v-model="dataForm.address"/>
        </el-form-item>
        <el-form-item label="logo图" prop="picUrl">
          <el-upload
            :headers="headers"
            :action="uploadPath"
            :show-file-list="false"
            :on-success="uploadPicUrl"
            class="avatar-uploader"
            accept=".jpg,.jpeg,.png,.gif">
            <img v-if="dataForm.picUrl" :src="dataForm.picUrl" class="avatar">
            <i v-else class="el-icon-plus avatar-uploader-icon"/>
          </el-upload>
        </el-form-item>
         <el-form-item label="内景图" prop="picUrl">
          <el-upload
            :headers="headers"
            :action="uploadPath"
            :show-file-list="false"
            :on-success="uploadPicUrl"
            class="avatar-uploader"
            accept=".jpg,.jpeg,.png,.gif">
            <img v-if="dataForm.picUrl" :src="dataForm.picUrl" class="avatar">
            <i v-else class="el-icon-plus avatar-uploader-icon"/>
          </el-upload>
        </el-form-item>
      </el-form>
      <div slot="footer" class="dialog-footer">
        <el-button @click="dialogFormVisible = false">取消</el-button>
        <el-button v-if="dialogStatus=='create'" type="primary" @click="createData">确定</el-button>
        <el-button v-else type="primary" @click="updateData">确定</el-button>
      </div>
    </el-dialog>

  </div>
</template>

<style>
.avatar-uploader .el-upload {
  border: 1px dashed #d9d9d9;
  border-radius: 6px;
  cursor: pointer;
  position: relative;
  overflow: hidden;
}
.avatar-uploader .el-upload:hover {
  border-color: #20a0ff;
}
.avatar-uploader-icon {
  font-size: 28px;
  color: #8c939d;
  width: 120px;
  height: 120px;
  line-height: 120px;
  text-align: center;
}
.avatar {
  width: 145px;
  height: 145px;
  display: block;
}
</style>

<script>
import { listBrand, createBrand, updateBrand, deleteBrand } from '@/api/brand'
import { uploadPath } from '@/api/storage'
import { getToken } from '@/utils/auth'
import Pagination from '@/components/Pagination' // Secondary package based on el-pagination

const typeMap = {
  0: '健康',
  1: '时尚',
  2: '服饰',
  3: '乐器',
  4: '饮食'

}

export default {
  name: 'Brand',
  components: { Pagination },
  data() {
    return {
      uploadPath,
      list: undefined,
      total: 0,
      listLoading: true,
      listQuery: {
        page: 1,
        limit: 20,
        id: undefined,
        name: undefined,
        sort: 'add_time',
        order: 'desc',
        types:undefined
      },
      typeMap,
      dataForm: {
        id: undefined,
        name: '',
        desc: '',
        type:'',
        openTime: undefined,
        phoneNumPrimary: undefined,
        phoneNumSecond:undefined,
        address:undefined,
        picUrl:undefined

      },
      dialogFormVisible: false,
      dialogStatus: '',
      textMap: {
        update: '编辑',
        create: '创建'
      },
      rules: {
        name: [
          { required: true, message: '品牌商名称不能为空', trigger: 'blur' }
        ]
      },
      downloadLoading: false,
      
    }
  },
  computed: {
    headers() {
      return {
        'X-Litemall-Admin-Token': getToken()
      }
    }
  },
  created() {
    this.getList()
  },
  methods: {
    //状态改成汉字
        formatterColumn(row) {
            switch(row.type){
                case 0:
                return '健康';
                break;

                case 1:
                return '时尚';
                break;

                case 2:
                return '服务';
                break;

                case 3:
                return '乐器';
                break;

                case 4:
                return '饮食';
                break;

                default:
                return '未知';
            }
        },
    getList() {
      this.listLoading = true
      listBrand(this.listQuery)
        .then(response => {
          console.log(response)
          this.list = response.data.data.items
          this.total = response.data.data.total
          this.listLoading = false
        })
        .catch(() => {
          this.list = []
          this.total = 0
          this.listLoading = false
        })
    },
    handleFilter() {
      this.listQuery.page = 1
      this.getList()
    },
    resetForm() {
      this.dataForm = {
        id: undefined,
        name: '',
        desc: '',
        floorPrice: undefined,
        picUrl: undefined
      }
    },
    handleCreate() {
      this.resetForm()
      this.dialogStatus = 'create'
      this.dialogFormVisible = true
      this.$nextTick(() => {
        this.$refs['dataForm'].clearValidate()
      })
    },
    uploadPicUrl: function(response) {
      this.dataForm.picUrl = response.data.url
    },
    createData() {
      this.$refs['dataForm'].validate(valid => {
        if (valid) {
          createBrand(this.dataForm)
            .then(response => {
              this.list.unshift(response.data.data)
              this.dialogFormVisible = false
              this.$notify.success({
                title: '成功',
                message: '创建成功'
              })
            })
            .catch(response => {
              this.$notify.error({
                title: '失败',
                message: response.data.errmsg
              })
            })
        }
      })
    },
    handleUpdate(row) {
      this.dataForm = Object.assign({}, row)
      this.dialogStatus = 'update'
      this.dialogFormVisible = true
      this.$nextTick(() => {
        this.$refs['dataForm'].clearValidate()
      })
    },
    updateData() {
      this.$refs['dataForm'].validate(valid => {
        if (valid) {
          updateBrand(this.dataForm)
            .then(() => {
              for (const v of this.list) {
                if (v.id === this.dataForm.id) {
                  const index = this.list.indexOf(v)
                  this.list.splice(index, 1, this.dataForm)
                  break
                }
              }
              this.dialogFormVisible = false
              this.$notify.success({
                title: '成功',
                message: '更新成功'
              })
            })
            .catch(response => {
              this.$notify.error({
                title: '失败',
                message: response.data.errmsg
              })
            })
        }
      })
    },
    handleDelete(row) {
      deleteBrand(row)
        .then(response => {
          this.$notify.success({
            title: '成功',
            message: '删除成功'
          })
          const index = this.list.indexOf(row)
          this.list.splice(index, 1)
        })
        .catch(response => {
          this.$notify.error({
            title: '失败',
            message: response.data.errmsg
          })
        })
    },
    handleDownload() {
      this.downloadLoading = true
      import('@/vendor/Export2Excel').then(excel => {
        const tHeader = [
          '商家ID',
          '商家名称',
          '商家简介',
          '商家类型',
          '营业时间',
          '联系方式1',
          '联系方式2',
          '地址'
        ]
        const filterVal = ['id', 'name', 'desc', 'type', 'openTime','phoneNumPrimary','phoneNumSecond','address']
        excel.export_json_to_excel2(
          tHeader,
          this.list,
          filterVal,
          '商家信息'
        )
        this.downloadLoading = false
      })
    }
  }
}
</script>
