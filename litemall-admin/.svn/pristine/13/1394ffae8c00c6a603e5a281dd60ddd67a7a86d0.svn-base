<template>
  <div class="app-container">
    
    <!-- 查询和其他操作 -->
    <div class="filter-container">
      <el-input v-model="listQuery.id" clearable class="filter-item" style="width: 200px;" placeholder="请输入学校ID"/>
      <!-- <input type="text" id="suggestId" name="suggestId" focus="focus" placeholder="地址" v-model="dataForm.address" class="input_style"> -->
      <el-input v-model="listQuery.name" clearable class="filter-item" style="width: 200px;" placeholder="请输入学校名称"/>
      <el-button v-permission="['GET /admin/brand/list']" class="filter-item" type="primary" icon="el-icon-search" @click="handleFilter">查找</el-button>
      <el-button v-permission="['POST /admin/brand/create']" class="filter-item" type="primary" icon="el-icon-edit" @click="handleCreate">添加</el-button>
      <!-- <el-button :loading="downloadLoading" class="filter-item" type="primary" icon="el-icon-download" @click="handleDownload">导出</el-button> -->
    </div>

    <!-- 查询结果 -->
    <el-table v-loading="listLoading" :data="list" size="small" element-loading-text="正在查询中。。。" border fit highlight-current-row>

      <el-table-column align="center" label="学校ID" prop="id"/>

      <el-table-column align="center" label="学校名称" prop="name"/>
      <!-- <el-table-column align="center" property="logoUrl" label="学校图片">
        <template slot-scope="scope">
          <img v-if="scope.row.logoUrl" :src="scope.row.logoUrl" width="100">
        </template>
      </el-table-column> -->
      <el-table-column align="center" label="学校类型" prop="type">
      <template slot-scope="scope">
             <el-tag>{{ scope.row.type | schoolTypeFilter }}</el-tag>
        </template>
      </el-table-column> 
     <!-- <el-table-column align="center" property="picUrl" label="学校图片">
        <template slot-scope="scope">
          <img v-if="scope.row.picUrl" :src="scope.row.picUrl" width="80">
        </template>
      </el-table-column>
-->
      <el-table-column align="center" min-width="200px" label="介绍" prop="desc"/>

      <el-table-column align="center" min-width="200px" label="地址" prop="address"/>
      <el-table-column align="center" min-width="100px" label="营业时间" prop="openTime"/>
      <el-table-column align="center"  min-width="100px" label="联系方式1" prop="phoneNumPrimary"/>
      <el-table-column align="center"  min-width="100px" label="联系方式2" prop="phoneNumSecond"/>

      <el-table-column align="center" label="操作" width="200" class-name="small-padding fixed-width">
        <template slot-scope="scope">
          <el-button v-permission="['POST /admin/brand/update']" type="primary" size="mini" @click="handleUpdate(scope.row)">编辑</el-button>
          <el-button v-permission="['POST /admin/brand/delete']" type="danger" size="mini" @click="handleDelete(scope.row)">删除</el-button>
        </template>
      </el-table-column>
      <el-table-column align="center" label="教师操作" width="100" class-name="small-padding fixed-width">
        <template slot-scope="scope">
          <el-button v-permission="['POST /admin/brand/update']" type="primary" size="mini" @click="toTeacherList(scope.row.id)">详情</el-button>
         
        </template>
      </el-table-column>
      <el-table-column align="center" label="课程操作" width="100" class-name="small-padding fixed-width">
        <template slot-scope="scope">
          <el-button v-permission="['POST /admin/brand/update']" type="primary" size="mini" @click="toClassList(scope.row.id)">详情</el-button>
          
        </template>
      </el-table-column>
    </el-table>

    <pagination v-show="total>0" :total="total" :page.sync="listQuery.page" :limit.sync="listQuery.limit" @pagination="getList" />

    <!-- 添加或修改对话框 -->
    
    <el-dialog :title="textMap[dialogStatus]" :visible.sync="dialogFormVisible">
      <el-form ref="dataForm" :rules="rules" :model="dataForm" status-icon label-position="left" label-width="100px" style="width: 400px; margin-left:50px;">
        <el-form-item label="学校名称" prop="name">
          <el-input v-model="dataForm.name"/>
        </el-form-item>
        <el-form-item label="学校类型" prop="type">
          <el-select v-model="dataForm.type" placeholder="请选择">
            <el-option
            v-for="item in option"
            :key="item"
            :label="typeMap1[item]"
            :value="item">
          </el-option>
        </el-select>
        </el-form-item>
        <el-form-item label="学校介绍" prop="desc">
          <el-input v-model="dataForm.desc"/>
        </el-form-item>
        <el-form-item label="营业时间" prop="openTime">
          <el-input v-model="dataForm.openTime"/>
        </el-form-item>
        <el-form-item label="地址" prop="address">
          <!-- <input type="text" id="suggestId" name="suggestId" placeholder="地址" v-model="dataForm.address" class="input_style"> -->
          <el-input id="suggestId" @focus="focus" v-model="dataForm.address"/>
        </el-form-item>
        <el-form-item label="联系方式1" prop="phoneNumPrimary">
          <el-input v-model="dataForm.phoneNumPrimary"/>
        </el-form-item>
        <el-form-item label="联系方式2" prop="phoneNumSecond">
          <el-input v-model="dataForm.phoneNumSecond"/>
        </el-form-item>
        <!-- <el-form-item label="学校图片" prop="logoUrl">
          <el-upload
            :headers="headers"
            :action="uploadPath"
            :show-file-list="false"
            :on-success="uploadPicUrl"
            class="avatar-uploader"
            accept=".jpg,.jpeg,.png,.gif">
            <img v-if="dataForm.logoUrl" :src="dataForm.logoUrl" class="avatar">
            <i v-else class="el-icon-plus avatar-uploader-icon"/>
          </el-upload>
        </el-form-item> -->
        <el-form-item label="logo图">
           <img  v-if="dataForm.logoUrl" :src="uploadHeaderPath+dataForm.logoUrl" class="logo">
           <el-upload
                 class="upload-uploader"
                 ref="upload1"
                 :headers="headers"
                 :limit="1"
                 :file-list="fileList"
                 action="111"
                 :http-request="uploadFile1"
                 :auto-upload="false"
                 list-type="picture">
              <el-button slot="trigger" size="small" type="primary">选取文件</el-button>
              <el-button style="margin-left: 10px;" size="small" type="success" @click="submitUpload1">上传到服务器</el-button>
           </el-upload>
        </el-form-item>
        <el-form-item label="内景图">
          <ul>
           <li v-for="(item,index) in dataForm.pictures" v-if="item.picUrl">
            <div class="picDiv"><img  v-if="item.picUrl"  :key="item" :src="uploadHeaderPath+item.picUrl"  class="pics">
            <el-button  class="delete" type="danger" icon="el-icon-delete" circle @click="deletePic(index,item.picId)"></el-button>
          </div>
         </li>
         </ul>
           <el-upload
                 class="upload-uploader"
                 ref="upload2"
                 :headers="headers"
                 multiple
                 :limit="5"
                 :file-list="fileList"
                 action="111"
                 :http-request="uploadFile2"
                 :auto-upload="false"
                 list-type="picture">
              <el-button slot="trigger" size="small" type="primary">选取文件</el-button>
              <el-button style="margin-left: 10px;" size="small" type="success" @click="submitUpload2">上传到服务器</el-button>
           </el-upload>
        </el-form-item>
             </el-form>
       <div class="bmap" id="bmap"></div>
      <div slot="footer" class="dialog-footer">

        <el-button @click="dialogFormVisible = false">取消</el-button>
        <el-button v-if="dialogStatus=='create'" type="primary" @click="createSchool">确定</el-button>
        <el-button v-else type="primary" @click="updateSchool">确定</el-button>
      </div>
    </el-dialog>

  </div>
</template>

<style>
.avatar-uploader .el-upload {
  border: 1px dashed #d9d9d9;
  border-radius: 6px;
  cursor: pointer;
  position: relative;
  overflow: hidden;
}
.avatar-uploader .el-upload:hover {
  border-color: #20a0ff;
}
.avatar-uploader-icon {
  font-size: 28px;
  color: #8c939d;
  width: 120px;
  height: 120px;
  line-height: 120px;
  text-align: center;
}
.avatar {
  width: 200px;
  height: 120px;
  display: block;
}
.picDiv{
  position: relative;
}
ul{
    padding-left:0px;
}
ul li{
  list-style-type:none;
  display:inline-block;
}
ul li .pics{
  width: 145px;
  height: 145px;
  display: block;
}
ul li .delete{
  position: absolute;
  top:55px;
  margin-left: 55px;
  background: red;
  display:block;
  opacity:0.1;
}
.delete:hover{
  display:block;
  opacity:1;
}
.bmap{
  width: 100%;
  height: 200px;
  overflow:hidden;
  margin:0;
  display:none;
}
.tangram-suggestion-main {
        z-index: 999999;
    }
.logo{
  width: 145px;
  height: 145px;
  display: block;
}
/*.input_style{
  display:none;
}*/
</style>

<script>
import { listSchool,AddSchool,UpdateSchool,DeleteSchool} from '@/api/school'
import { uploadPath,uploadHeaderPath } from '@/api/storage'
import { getToken } from '@/utils/auth'
import Pagination from '@/components/Pagination' // Secondary package based on el-pagination
import { uploadSchoolIcon, uploadSchoolIndoorPic,uploadGoodsIcon,uploadGoodsDetailPic} from '@/api/fileUpload'
import { publishGoods} from '@/api/goods'
const typeMap={
  0:'音乐',
  1:'美术',
  2:'外语',
  3:'体育',
  4:'书法',
  5:'舞蹈',
  6:'技术',
  7:'其他'
}

export default {
  name: 'School',
  components: { Pagination },
  filters: {
    schoolTypeFilter(type) {
      return typeMap[type]
    }
  },
  data() {
    return {
      uploadPath,
      uploadHeaderPath,
      list: undefined,
      total: 0,
      listLoading: true,
      listQuery: {
        page: 1,
        limit: 20,
        id:undefined,
        name:undefined
        
      },
      fileData1:undefined,
      deleted:{
        ids:undefined
      },
      map:undefined,
      //auto:undefined,
      //address_detail: null, 
      userlocation: undefined,
      option:[0,1,2,3,4,5,6,7],
      typeMap1:{
       0:'音乐',
       1:'美术',
       2:'外语',
       3:'体育',
       4:'书法',
       5:'舞蹈',
       6:'技术',
       7:'其他'
      },
      dataForm: {
        id: undefined,
        address:undefined,
        name: '',
        desc: '',
        floorPrice: undefined,
        logoUrl: undefined,
        pictures:[],
        uploadList: [],
        updateList:[],
        deleteList:[],
        phoneNumPrimary:undefined,
        phoneNumSecond:undefined,
        openTime:undefined,
        longitude:undefined,
        latitude:undefined
      },
      dialogFormVisible: false,
      dialogStatus: '',
      textMap: {
        update: '编辑',
        create: '创建'
      },
      rules: {
        name: [
          { required: true, message: '学校名称不能为空', trigger: 'blur' }
        ]
      },
      downloadLoading: false
    }
  },
  computed: {
    headers() {
      return {
        'X-Litemall-Admin-Token': getToken()
      }
    }
  },
  created() {
    this.getList();
    console.log(this.dataForm);
  },
  mounted(){
      // var th=this;
      // var map = new BMap.Map('map',{enableMapClick:true});    // 创建Map实例
      // map.centerAndZoom(new BMap.Point(104.06,30.67), 11);  // 初始化地图,设置中心点坐标和地图级别

      // //添加地图类型控件
      // map.addControl(new BMap.MapTypeControl({
      //   mapTypes:[
      //     BMAP_NORMAL_MAP,
      //     BMAP_HYBRID_MAP
      //   ]}));
      // map.setCurrentCity("成都");          // 设置地图显示的城市 此项是必须设置的
      // map.enableScrollWheelZoom(true);     //开启鼠标滚轮缩放
      // var auto = new BMap.Autocomplete({
      //                    "input": "suggestId" ,
      //                     "location": map
      //               })
                   
      //               var myValue
      //               //鼠标点击下拉列表后的事件
      //               auto.addEventListener("onconfirm", function (e) {    
      //                  var _value = e.item.value;
      //                  console.log('ee'+_value)
      //                  myValue = _value.province + _value.city + _value.district + _value.street + _value.business;
      //                  //this.address_detail = myValue
      //                  setPlace();
      //               });

      //               function setPlace() {
      //                 //清除地图上所有覆盖物
      //                   map.clearOverlays();    
      //                   function myFun() {
      //                     //获取第一个智能搜索的结果
      //                      console.log(local.getResults().getPoi(0).point)
      //                       //this.userlocation = local.getResults().getPoi(0).point;   
      //                       map.centerAndZoom(local.getResults().getPoi(0).point, 18);
      //                       //添加标注
      //                       map.addOverlay(new BMap.Marker(local.getResults().getPoi(0).point));   
      //                  }
                       
      //       //智能搜索
      //                   var local = new BMap.LocalSearch(map, {
      //                       onSearchComplete: myFun
      //                   });
      //                   local.search(myValue);

      //                   //测试输出坐标（指的是输入框最后确定地点的经纬度）
      //                   map.addEventListener("click",function(e){
      //                       //经度
      //                       console.log(this.userlocation.lng);
      //                       //维度
      //                       console.log(this.userlocation.lat);
      //                   })
      //               }
      
  },
  methods: {
    getList() {
      this.listLoading = true
      listSchool(this.listQuery)
        .then(response => {
          console.log(response);
          this.list = response.data.data.items
          console.log(this.list)
          // for(var i=0;i<this.list.length;i++){
          //   this.list[i].logoUrl=uploadHeaderPath+this.list[i].logoUrl
          //   if(this.list[i].pictures){
          //   for (var j in this.list[i].pictures) {
          //       if(this.list[i].pictures[j].picUrl.substr(0,4)!='http'){
          //       this.list[i].pictures[j].picUrl=uploadHeaderPath+this.list[i].pictures[j].picUrl
          //    }
          //   }
          //  }
          //   //console.log(this.list[i].logoUrl.substr(0,4))
          //  // if(this.list[i].pictures){
          //  //  for (var j in this.list[i].pictures) {
          //  //      if(this.list[i].pictures[j].picUrl.substr(0,4)!='http'){
          //  //      this.list[i].pictures[j].picUrl=uploadHeaderPath+this.list[i].pictures[j].picUrl
          //  //   }
          //  //  }
          //  // }
          // }
          this.total = response.data.data.total
          this.listLoading = false
        })
        .catch(() => {
          this.list = []
          this.total = 0
          this.listLoading = false
        })
    },
    handleFilter() {
      this.listQuery.page = 1

      this.getList()
    },
    toTeacherList(id){
      console.log('aaaa'+id);
      this.$router.push({name:'teacher',params:{schoolId:id}})
    },
    toClassList(id){
      this.$router.push({name:'class',params:{schoolId:id}})
    },
    resetForm() {
      this.dataForm = {
        id: undefined,
        name: '',
        address:undefined,
        desc: '',
        pictures:[],
        //pictures:[],
        uploadList: [],
        updateList:[],
        deleteList:[],
        floorPrice: undefined,
        logoUrl: undefined,
        phoneNumPrimary:undefined,
        phoneNumSecond:undefined,
        openTime:undefined,
        longitude:undefined,
        latitude:undefined
      }
    },
    handOpen(){

    },
    focus(){
      var th=this
        var map = new BMap.Map('bmap',{enableMapClick:true});    // 创建Map实例
        map.centerAndZoom(new BMap.Point(104.06,30.67), 11);  // 初始化地图,设置中心点坐标和地图级别

        //添加地图类型控件
        map.addControl(new BMap.MapTypeControl({
          mapTypes:[
            BMAP_NORMAL_MAP,
            BMAP_HYBRID_MAP
          ]}));
        map.setCurrentCity("成都");          // 设置地图显示的城市 此项是必须设置的
        map.enableScrollWheelZoom(true);
      var auto = new BMap.Autocomplete({
                         "input": "suggestId",
                          "location": map
                    })
        //console.log(auto)            
        var myValue
                    //鼠标点击下拉列表后的事件
        auto.addEventListener("onconfirm", function (e) {    
          var _value = e.item.value;
          //console.log('ee'+_value)
          myValue = _value.province + _value.city + _value.district + _value.street + _value.business;
                       //this.address_detail = myValue
          th.dataForm.address=myValue;

          setPlace();
          auto=undefined;
        });

        function setPlace() {
          //清除地图上所有覆盖物
          map.clearOverlays();    
          function myFun() {
          //获取第一个智能搜索的结果
            console.log('aa'+local.getResults().getPoi(0).point);
            th.dataForm.latitude=local.getResults().getPoi(0).point.lat;
            th.dataForm.longitude=local.getResults().getPoi(0).point.lng;
            //console.log(th.dataForm.longitude);
            //this.userlocation = local.getResults().getPoi(0).point;   
            // map.centerAndZoom(local.getResults().getPoi(0).point, 18);
            // //添加标注
            // map.addOverlay(new BMap.Marker(local.getResults().getPoi(0).point));   
            }
                       
            //智能搜索
            var local = new BMap.LocalSearch(map, {
              onSearchComplete: myFun
              });
            local.search(myValue);

                        //测试输出坐标（指的是输入框最后确定地点的经纬度）
                        // map.addEventListener("click",function(e){
                        //     //经度
                        //     console.log(this.userlocation.lng);
                        //     //维度
                        //     console.log(this.userlocation.lat);
                        // })
        }
     
      

    },
    handleCreate() {
      this.resetForm()
      this.dialogStatus = 'create'
      this.dialogFormVisible = true
      this.$nextTick(()=>{
        // var th=this
        // var map = new BMap.Map('bmap',{enableMapClick:true});    // 创建Map实例
        // map.centerAndZoom(new BMap.Point(104.06,30.67), 11);  // 初始化地图,设置中心点坐标和地图级别

        // //添加地图类型控件
        // map.addControl(new BMap.MapTypeControl({
        //   mapTypes:[
        //     BMAP_NORMAL_MAP,
        //     BMAP_HYBRID_MAP
        //   ]}));
        // map.setCurrentCity("成都");          // 设置地图显示的城市 此项是必须设置的
        // map.enableScrollWheelZoom(true);
      //   var auto = new BMap.Autocomplete({
      //                    "input": "suggestId",
      //                     "location": map
      //               })
      //   //console.log(auto)            
      //   var myValue
      //               //鼠标点击下拉列表后的事件
      //   auto.addEventListener("onconfirm", function (e) {    
      //     var _value = e.item.value;
      //     //console.log('ee'+_value)
      //     myValue = _value.province + _value.city + _value.district + _value.street + _value.business;
      //                  //this.address_detail = myValue
      //     th.dataForm.address=myValue;
      //     setPlace();
      //   });

      //   function setPlace() {
      //     //清除地图上所有覆盖物
      //     map.clearOverlays();    
      //     function myFun() {
      //     //获取第一个智能搜索的结果
      //       console.log('aa'+local.getResults().getPoi(0).point);
      //       th.dataForm.latitude=local.getResults().getPoi(0).point.lat;
      //       th.dataForm.longitude=local.getResults().getPoi(0).point.lng;
      //       //console.log(th.dataForm.longitude);
      //       //this.userlocation = local.getResults().getPoi(0).point;   
      //       // map.centerAndZoom(local.getResults().getPoi(0).point, 18);
      //       // //添加标注
      //       // map.addOverlay(new BMap.Marker(local.getResults().getPoi(0).point));   
      //       }
                       
      //       //智能搜索
      //       var local = new BMap.LocalSearch(map, {
      //         onSearchComplete: myFun
      //         });
      //       local.search(myValue);

      //                   //测试输出坐标（指的是输入框最后确定地点的经纬度）
      //                   // map.addEventListener("click",function(e){
      //                   //     //经度
      //                   //     console.log(this.userlocation.lng);
      //                   //     //维度
      //                   //     console.log(this.userlocation.lat);
      //                   // })
      //   }
     
      // });
      
       });           
      // this.$nextTick(() => {
      //   this.$refs['dataForm'].clearValidate()
      // })
    },
    createSchool(){
      AddSchool(this.dataForm).then((response)=>{

        console.log(response);
        //this.list.unshift(response.data.data)
             this.getList();
              this.dialogFormVisible = false
              this.$notify.success({
                title: '成功',
                message: '添加学校成功'
              })
      }).catch((error)=>{
        console.log(error)
        this.$notify.error({
                title: '失败',
                message: response.data.errmsg
              })
      })
    },
    uploadPicUrl: function(response) {
      this.dataForm.picUrl = response.data.url
    },
   
    createData() {//添加学校信息
      console.log("nnnnn");
      this.$refs['dataForm'].validate(valid => {
        if (valid) {
          crthis.listQueryeateBrand(this.dataForm)
            .then(response => {
              this.list.unshift(response.data.data)
              this.dialogFormVisible = false
              this.$notify.success({
                title: '成功',
                message: '创建成功'
              })
            })
            .catch(response => {
              this.$notify.error({
                title: '失败',
                message: response.data.errmsg
              })
            })
        }
      })
    },
    handleUpdate(row) {
    
      this.dataForm = Object.assign({}, row)
      if(!this.dataForm.pictures){
        this.dataForm.pictures=[]
      }
      this.dataForm.deleteList=[]
      this.dataForm.uploadList=[]
      this.dialogStatus = 'update'
      this.dialogFormVisible = true
      this.$nextTick(() => {
        this.$refs['dataForm'].clearValidate()
        // var th=this
        // var map = new BMap.Map('bmap',{enableMapClick:true});    // 创建Map实例
        // //map.centerAndZoom(new BMap.Point(104.06,30.67), 11);  // 初始化地图,设置中心点坐标和地图级别

        // //添加地图类型控件
        // map.addControl(new BMap.MapTypeControl({
        //   mapTypes:[
        //     BMAP_NORMAL_MAP,
        //     BMAP_HYBRID_MAP
        //   ]}));
        // map.setCurrentCity("成都");          // 设置地图显示的城市 此项是必须设置的
        // map.enableScrollWheelZoom(true);
      //   var auto = new BMap.Autocomplete({
      //                    "input": "suggestId",
      //                     "location": map
      //               })
      //   //console.log(auto)            
      //   var myValue
      //               //鼠标点击下拉列表后的事件
      //   auto.addEventListener("onconfirm", function (e) {    
      //     var _value = e.item.value;
      //     console.log('ee'+_value)
      //     myValue = _value.province + _value.city + _value.district + _value.street + _value.business;
      //                  //this.address_detail = myValue
      //     th.dataForm.address=myValue;
      //     setPlace();
      //   });

      //   function setPlace() {
      //     //清除地图上所有覆盖物
      //     map.clearOverlays();    
      //     function myFun() {
      //     //获取第一个智能搜索的结果
      //       //console.log(local.getResults().getPoi(0).point);
      //       th.dataForm.latitude=local.getResults().getPoi(0).point.lat;
      //       th.dataForm.longitude=local.getResults().getPoi(0).point.lng;
      //       console.log(th.dataForm.longitude);
      //       //this.userlocation = local.getResults().getPoi(0).point;   
      //       // map.centerAndZoom(local.getResults().getPoi(0).point, 18);
      //       // //添加标注
      //       // map.addOverlay(new BMap.Marker(local.getResults().getPoi(0).point));   
      //       }
                       
      //       //智能搜索
      //       var local = new BMap.LocalSearch(map, {
      //         onSearchComplete: myFun
      //         });
      //       local.search(myValue);

      //                   //测试输出坐标（指的是输入框最后确定地点的经纬度）
      //                   // map.addEventListener("click",function(e){
      //                   //     //经度
      //                   //     console.log(this.userlocation.lng);
      //                   //     //维度
      //                   //     console.log(this.userlocation.lat);
      //                   // })
      //   }
      // })

      });
    },
    updateSchool(){
      UpdateSchool(this.dataForm).then((response)=>{
        for (const v of this.list) {
          if (v.id === this.dataForm.id) {
            const index = this.list.indexOf(v)
            this.list.splice(index, 1, this.dataForm)
            break
          }
        }
        this.dialogFormVisible = false
              this.$notify.success({
                title: '成功',
                message: '更新成功'
              })
      }).catch((error)=>{
        this.$notify.error({
                title: '失败',
                message: response.data.errmsg
              })
      })
    },
    updateData() {
      this.$refs['dataForm'].validate(valid => {
        if (valid) {
          updateBrand(this.dataForm)
            .then(() => {
              for (const v of this.list) {
                if (v.id === this.dataForm.id) {
                  const index = this.list.indexOf(v)
                  this.list.splice(index, 1, this.dataForm)
                  break
                }
              }
              
            })
            .catch(response => {
              this.$notify.error({
                title: '失败',
                message: response.data.errmsg
              })
            })
        }
      })
    },
    handleDelete(row) {
      this.deleted.ids=row.id;
      //console.log(this.deleted.ids[0])
      DeleteSchool(this.deleted)
        .then(response => {
          this.$notify.success({
            title: '成功',
            message: '删除成功'
          })
          // const index = this.list.indexOf(row)
          // this.list.splice(index, 1)
          this.getList();
        })
        .catch(response => {
          this.$notify.error({
            title: '失败',
            message: response.data.errmsg
          })
        })
    },
    uploadFile1(file){
    this.fileData1.append('iconFile',file.file);
    console.log(this.fileData1.get("iconFile"))
    },
//确定上传
   submitUpload1() {
        this.fileData1= new FormData();
        this.$refs.upload1.submit();
        var self=this
    uploadSchoolIcon(this.fileData1).then(function(response) {
                self.$refs.upload1.clearFiles();
                 self.$message({
                  message: '上传成功',
                  type: 'success'
                });
                 //self.dataForm.logoUrl=uploadHeaderPath+response.data.data[0]
                 self.dataForm.logoUrl=response.data.data[0]
                 //self.uploadlogoUrl=response.data.data[0]
                 console.log(self.dataForm.logoUrl)
                    })
                    .catch(function(error) {
                        console.log(error);
                    })
      },
    //上传商家内景图片(多张)
uploadFile2(file){
    this.fileData2.append('fileList',file.file)
    console.log(this.fileData2.get("fileList"))
},
//确定上传
submitUpload2() {
  this.fileData2 = new FormData();
        var self=this        
        this.$refs.upload2.submit();
        uploadSchoolIndoorPic(this.fileData2).then(function(response) {
          self.$refs.upload2.clearFiles();
            console.log(response.data)
            for(var key in response.data.data){
              self.dataForm.pictures.push({'id':null,'picUrl':response.data.data[key]})
              self.dataForm.uploadList.push({'id':null,'url':response.data.data[key]})
                             
            }
            console.log(self.dataForm.pictures)
            // for(var i in self.dataForm.pictures){
            //       self.dataForm.pictures[i].picUrl=uploadHeaderPath+self.dataForm.pictures[i].picUrl
            //       }
                 self.$message({
                  message: '上传成功',
                  type: 'success'
                })
                    })
                    .catch(function(error) {
                        console.log(error);
                    })
      },

//上传商品内景图片(多张)
uploadFile3(file){
    this.fileData3.append('fileList',file.file)
    console.log(this.fileData3.get("fileList"))
},
//确定上传
submitUpload3() {
  this.fileData3 = new FormData();
        var self=this        
        this.$refs.upload3.submit();
        uploadGoodsDetailPic(this.fileData3).then(function(response) {
          self.$refs.upload3.clearFiles();
            console.log(response)
            for(var key in response.data.data){
              self.goodDataForm.uploadList.push({'id':null,'url':response.data.data[key]})
               self.goodDataForm.pictures.push({'id':null,'picUrl':response.data.data[key]})
            }
            for(var i in self.goodDataForm.pictures){
                  if(self.goodDataForm.pictures[i].picUrl.substr(0,4)!='http'){
                    self.goodDataForm.pictures[i].picUrl=uploadHeaderPath+self.goodDataForm.pictures[i].picUrl
                      }
                  }
            console.log(self.goodDataForm.uploadList)
                 self.$message({
                  message: '上传成功',
                  type: 'success'
                });
                    })
                    .catch(function(error) {
                        console.log(error);
                    })
      },

//删除图片
deletePic(index,picId){
  this.dataForm.pictures.splice(index,1)
  this.dataForm.deleteList.push(picId)
},
    handleDownload() {
      this.downloadLoading = true
      import('@/vendor/Export2Excel').then(excel => {
        const tHeader = [
          '品牌商ID',
          '品牌商名称',
          '介绍',
          '低价',
          '品牌商图片'
        ]
        const filterVal = ['id', 'name', 'desc', 'floorPrice', 'picUrl']
        excel.export_json_to_excel2(
          tHeader,
          this.list,
          filterVal,
          '品牌商信息'
        )
        this.downloadLoading = false
      })
    }
  }
}
</script>
