<template>
    <div class="app-container">

        <!-- 查询和其他操作 -->
        <div class="filter-container">
            <el-input v-model="listQuery.id" clearable class="filter-item" style="width: 200px;" placeholder="请输入商家ID"/>
            <el-input v-model="listQuery.name" clearable class="filter-item" style="width: 200px;"
                      placeholder="请输入商家名称"/>
            <el-select v-model="listQuery.types" clearable style="width: 200px" class="filter-item"
                       placeholder="请选择商家类别">
                <el-option v-for="type in brandTypes" :key="type.id" :label="type.name" :value="type.id"/>
            </el-select>
            <el-button v-permission="['GET /admin/brand/list']" class="filter-item" type="primary" icon="el-icon-search"
                       @click="handleFilter">查找
            </el-button>
            <el-button v-permission="['POST /admin/brand/create']" class="filter-item" type="primary"
                       icon="el-icon-edit" @click="handleCreate">添加
            </el-button>
            <el-button :loading="downloadLoading" class="filter-item" type="primary" icon="el-icon-download"
                       @click="handleDownload">导出
            </el-button>
            <el-button class="filter-item"  type="danger" icon="el-icon-delete" @click="handleSelectionDelete">删除</el-button>
        </div>

        <!-- 查询结果 -->
        <div style="height: calc(100% - 155px);overflow: hidden">
            <el-table v-loading="listLoading" :data="list" size="small" element-loading-text="正在查询中。。。" border fit
                      highlight-current-row height="100%" @selection-change="handleSelectionChange">
                <el-table-column
                    type="selection"
                    width="55">
                </el-table-column>

                <el-table-column align="center" label="商家ID" prop="id"/>

                <el-table-column align="center" label="商家名称" prop="name"/>

                <!--  <el-table-column align="center" property="picUrl" label="品牌商图片">
                    <template slot-scope="scope">
                      <img v-if="scope.row.picUrl" :src="scope.row.picUrl" width="80">
                    </template>
                  </el-table-column>
            -->
                <el-table-column align="center" min-width="250px" label="商家简介" prop="desc"/>

                <el-table-column align="center" label="商家类型" prop="typeName"/>


                <el-table-column align="center" label="营业时间" prop="openTime"/>

                <el-table-column align="center" label="联系方式" min-width="100px" prop="phoneNumPrimary"/>

                <el-table-column align="center" label="地址" min-width="100px" prop="address"/>



                <el-table-column align="center" label="操作" width="200" class-name="small-padding fixed-width">
                    <template slot-scope="scope">
                        <el-button v-permission="['POST /admin/brand/update']" type="primary" size="mini"
                                   @click="handleUpdate(scope.row)">编辑
                        </el-button>
                        <el-button v-permission="['POST /admin/brand/delete']" type="danger" size="mini"
                                   @click="handleDelete(scope.row)">删除
                        </el-button>
                    </template>
                </el-table-column>
                <el-table-column align="center" label="商品操作" width="200" class-name="small-padding fixed-width">
                    <template slot-scope="scope">
                        <el-button v-permission="['POST /admin/brand/update']" type="primary" size="mini"
                                   @click="handleCreatGoods(scope.row)">详情
                        </el-button>
                    </template>
                </el-table-column>
            </el-table>
        </div>

        <pagination v-show="total>0" :total="total" :page.sync="listQuery.page" :limit.sync="listQuery.limit"
                    @pagination="getList"/>

        <!-- 商家添加或修改对话框 -->
        <el-dialog :title="textMap[dialogStatus]" :visible.sync="dialogFormVisible">
            <el-form ref="dataForm" :rules="rules" :model="dataForm" status-icon label-position="left"
                     label-width="100px" style="width: 400px; margin-left:50px;">
                <el-form-item v-if="dataForm.id" label="商家ID" prop="id">
                    <el-input v-model="dataForm.id"/>
                </el-form-item>
                <el-form-item label="商家名称" prop="name">
                    <el-input v-model="dataForm.name"/>
                </el-form-item>
                <el-form-item label="商家简介" prop="desc">
                    <el-input type="textarea" :rows="3" v-model="dataForm.desc"/>
                </el-form-item>
                <el-form-item label="商家类型" prop="type">
                    <el-select v-model="dataForm.type" placeholder="请选择">
                        <el-option v-for="type in brandTypes" :key="type.id" :label="type.name" :value="type.id"/>
                        <!--<el-option :value="0" label="健康"/>
                        <el-option :value="1" label="时尚"/>
                        <el-option :value="2" label="服饰"/>
                        <el-option :value="3" label="乐器"/>
                        <el-option :value="4" label="饮食"/>-->
                    </el-select>
                </el-form-item>
                <el-form-item label="营业时间" prop="openTime">
                    <el-input v-model="dataForm.openTime"/>
                </el-form-item>
                <el-form-item label="联系方式" prop="phoneNumPrimary">
                    <el-input v-model="dataForm.phoneNumPrimary"/>
                </el-form-item>

              <el-form-item label="地址" prop="address">
                <el-input  v-model="dataForm.address"/>
              </el-form-item>

                <el-form-item label="地图定位" prop="mapAddress">
                    <el-input id="suggestId" @focus="focus" v-model="dataForm.mapAddress"/>
                </el-form-item>
                <el-form-item label="logo图">
                    <img v-if="dataForm.logoUrl" :src="dataForm.logoUrl" class="logo">
                    <el-upload
                        class="upload-uploader"
                        ref="upload1"
                        :headers="headers"
                        :limit="1"
                        :file-list="fileList"
                        action="111"
                        :http-request="uploadFile1"
                        :auto-upload="false"
                        list-type="picture">
                        <el-button slot="trigger" size="small" type="primary">选取文件</el-button>
                        <el-button style="margin-left: 10px;" size="small" type="success" @click="submitUpload1">
                            上传到服务器
                        </el-button>
                    </el-upload>
                </el-form-item>
                <el-form-item label="内景图">
                    <ul class="ve">
                        <li v-for="(item,index) in dataForm.pictures" v-if="item.picUrl">
                            <div class="picDiv"><img v-if="item.picUrl" :key="item.picId" :src="item.picUrl"
                                                     class="pics">
                                <el-button class="delete" type="danger" icon="el-icon-delete" circle
                                           @click="deletePic(index,item.picId)"></el-button>
                            </div>
                        </li>
                    </ul>
                    <el-upload
                        class="upload-uploader"
                        ref="upload2"
                        :headers="headers"
                        multiple
                        :limit="5"
                        :file-list="fileList"
                        action="111"
                        :http-request="uploadFile2"
                        :auto-upload="false"
                        list-type="picture">
                        <el-button slot="trigger" size="small" type="primary">选取文件</el-button>
                        <el-button style="margin-left: 10px;" size="small" type="success" @click="submitUpload2">
                            上传到服务器
                        </el-button>
                    </el-upload>
                </el-form-item>
                <div class="bmap" id="bmap"></div>
            </el-form>
            <div slot="footer" class="dialog-footer">
                <el-button @click="dialogFormVisible = false">取消</el-button>
                <el-button v-if="dialogStatus=='create'" type="primary" @click="createData">确定</el-button>
                <el-button v-else type="primary" @click="updateData">确定</el-button>
            </div>
        </el-dialog>

        <!-- 商品添加对话框 -->
        <el-dialog :title="'添加商品'" :visible.sync="goodDialogVisible">
            <el-form ref="goodDataForm" :rules="rules" :model="goodDataForm" status-icon label-position="left"
                     label-width="100px" style="width: 400px; margin-left:50px;">
                <el-form-item label="商品编号" prop="goodsSn">
                    <el-input v-model="goodDataForm.goodsSn"/>
                </el-form-item>
                <el-form-item label="商品名称" prop="name">
                    <el-input v-model="goodDataForm.name"/>
                </el-form-item>
                <el-form-item label="商品简介" prop="brief">
                    <el-input v-model="goodDataForm.brief"/>
                </el-form-item>
                <el-form-item label="商品价格" prop="counterPrice">
                    <el-input v-model="goodDataForm.counterPrice"/>
                </el-form-item>
                <el-form-item label="logo图">
                    <img v-if="goodDataForm.picUrl" :src="goodDataForm.picUrl" class="logo">
                    <el-upload
                        class="upload-uploader"
                        ref="upload4"
                        :headers="headers"
                        :limit="1"
                        :file-list="fileList"
                        action="111"
                        :http-request="uploadFile4"
                        :auto-upload="false"
                        list-type="picture">
                        <el-button slot="trigger" size="small" type="primary">选取文件</el-button>
                        <el-button style="margin-left: 10px;" size="small" type="success" @click="submitUpload4">
                            上传到服务器
                        </el-button>
                    </el-upload>
                </el-form-item>
                <el-form-item label="宣传图片">
                    <ul class="ve">
                        <li v-for="(item,index) in goodDataForm.pictures" v-if="item.picUrl">
                            <div class="picDiv"><img v-if="item.picUrl" :key="item.picId" :src="item.picUrl"
                                                     class="pics">
                                <el-button class="delete" type="danger" icon="el-icon-delete" circle
                                           @click="deletePic(index,item.picId)"></el-button>
                            </div>
                        </li>
                    </ul>
                    <el-upload
                        class="upload-uploader"
                        ref="upload3"
                        :headers="headers"
                        multiple
                        :limit="5"
                        :file-list="fileList"
                        action="111"
                        :http-request="uploadFile3"
                        :auto-upload="false"
                        list-type="picture">
                        <el-button slot="trigger" size="small" type="primary">选取文件</el-button>
                        <el-button style="margin-left: 10px;" size="small" type="success" @click="submitUpload3">
                            上传到服务器
                        </el-button>
                    </el-upload>
                </el-form-item>
            </el-form>

            <div slot="footer" class="dialog-footer">
                <el-button @click="dialogFormVisible = false">取消</el-button>
                <el-button type="primary" @click="createGoodData">确定</el-button>
            </div>
        </el-dialog>
    </div>
</template>

<style>
    .logo {
        width: 145px;
        height: 145px;
        display: block;
    }

    .picDiv {
        position: relative;
    }

    ul.ve {
        padding-left: 0px;
    }

    ul.ve li {
        list-style-type: none;
        display: inline-block;
    }

   ul.ve li .pics {
        width: 145px;
        height: 145px;
        display: block;
    }

   ul.ve li .delete {
        position: absolute;
        top: 55px;
        margin-left: 55px;
        background: red;
        display: block;
        opacity: 0.2;
    }

    ul.ve li .delete:hover {
        display: block;
        opacity: 1;
    }

    .bmap {
        width: 100%;
        height: 200px;
        overflow: hidden;
        margin: 0;
        display: none;
    }

    .tangram-suggestion-main {
        z-index: 999999;
    }
</style>

<script>
    import {listBrand, createBrand, updateBrand, deleteBrand, listBrandType} from '@/api/brand'
    import {publishGoods} from '@/api/goods'
    import {uploadPath, uploadHeaderPath} from '@/api/storage'
    import {getToken} from '@/utils/auth'
    import Pagination from '@/components/Pagination' // Secondary package based on el-pagination
    import {uploadBrandIcon, uploadBrandIndoorPic, uploadGoodsIcon, uploadGoodsDetailPic} from '@/api/fileUpload'

    const typeMap = {
        0: '健康',
        1: '时尚',
        2: '服饰',
        3: '乐器',
        4: '饮食',

    }

    export default {
        name: 'Brand',
        components: {Pagination},
        data() {
            return {
                uploadHeaderPath,
                fileData2: undefined,
                fileData1: undefined,
                list: undefined,
                total: 0,
                listLoading: true,
                listQuery: {
                    page: 1,
                    limit: 20,
                    id: undefined,
                    name: undefined,
                    sort: 'add_time',
                    order: 'desc',
                    types: undefined
                },
                typeMap,
                dataForm: {
                    id: undefined,
                    name: '',
                    desc: '',
                    type: '',
                    openTime: undefined,
                    phoneNumPrimary: undefined,
                    address: undefined,
                    logoUrl: undefined,
                    pictures: [],
                    uploadList: [],
                    updateList: [],
                    deleteList: [],
                    longitude: undefined,
                    latitude: undefined,

                },
                uploadlogoUrl: undefined,
                uploadpictures: [],
                dialogFormVisible: false,
                dialogStatus: '',
                textMap: {
                    update: '编辑',
                    create: '创建'
                },
                rules: {
                    goodsSn: [{required: true, message: '商品编号不能为空', trigger: 'blur'}],
                    name: [{required: true, message: '名称不能为空', trigger: 'blur'}],

                },
                downloadLoading: false,
                deletelist: [],
                //添加商品相关数据
                goodDialogVisible: false,
                goodDataForm: {
                    id: undefined,
                    goodsSn: undefined,
                    name: '',
                    brief: '',
                    brandId: undefined,
                    counterPrice: undefined,
                    uploadList: [],
                    picUrl: '',
                    pictures: [],

                },
                fileData3: undefined,
                fileData4: undefined,
                uploadlogoUrl_good: undefined,
                fileList: [],
                listBrandTypeQuery: {
                    type: 0
                },
                brandTypes: [],
                selectionList:[],
            }
        },
        computed: {
            headers() {
                return {
                    'X-Litemall-Admin-Token': getToken()
                }
            }
        },
        created() {
            this.getList()
            this.listBrandType()
        },
        methods: {
//上传商家logo图片
            uploadFile1(file) {
                this.fileData1.append('iconFile', file.file);
                console.log(this.fileData1.get("iconFile"))
            },
//确定上传
            submitUpload1() {
                this.fileData1 = new FormData();
                this.$refs.upload1.submit();
                var self = this
                uploadBrandIcon(this.fileData1).then(function (response) {
                    self.$refs.upload1.clearFiles();
                    self.$message({
                        message: '上传成功',
                        type: 'success'
                    });
                    self.dataForm.logoUrl = uploadHeaderPath + response.data.data[0]
                    self.uploadlogoUrl = response.data.data[0]
                    console.log(self.dataForm.logoUrl)
                })
                .catch(function (error) {
                    console.log(error);
                })
            },
//上传商家内景图片(多张)
            uploadFile2(file) {
                this.fileData2.append('fileList', file.file)
                console.log(this.fileData2.get("fileList"))
            },
//确定上传
            submitUpload2() {
                this.fileData2 = new FormData();
                var self = this
                this.$refs.upload2.submit();
                uploadBrandIndoorPic(this.fileData2).then(function (response) {
                    self.$refs.upload2.clearFiles();
                    console.log(response)
                    for (var key in response.data.data) {
                        self.dataForm.uploadList.push({'id': null, 'url': response.data.data[key]})
                        self.dataForm.pictures.push({'id': null, 'picUrl': response.data.data[key]})
                    }
                    for (var i in self.dataForm.pictures) {
                        if (self.dataForm.pictures[i].picUrl.substr(0, 4) != 'http') {
                            self.dataForm.pictures[i].picUrl = uploadHeaderPath + self.dataForm.pictures[i].picUrl
                        }
                    }
                    self.$message({
                        message: '上传成功',
                        type: 'success'
                    })
                })
                .catch(function (error) {
                    console.log(error);
                })
            },

//上传商品内景图片(多张)
            uploadFile3(file) {
                this.fileData3.append('fileList', file.file)
                console.log(this.fileData3.get("fileList"))
            },
//确定上传
            submitUpload3() {
                this.fileData3 = new FormData();
                var self = this
                this.$refs.upload3.submit();
                uploadGoodsDetailPic(this.fileData3).then(function (response) {
                    self.$refs.upload3.clearFiles();
                    console.log(response)
                    for (var key in response.data.data) {
                        self.goodDataForm.uploadList.push({'id': null, 'url': response.data.data[key]})
                        self.goodDataForm.pictures.push({'id': null, 'picUrl': response.data.data[key]})
                    }
                    for (var i in self.goodDataForm.pictures) {
                        if (self.goodDataForm.pictures[i].picUrl.substr(0, 4) != 'http') {
                            self.goodDataForm.pictures[i].picUrl = uploadHeaderPath + self.goodDataForm.pictures[i].picUrl
                        }
                    }
                    console.log(self.goodDataForm.uploadList)
                    self.$message({
                        message: '上传成功',
                        type: 'success'
                    });
                })
                .catch(function (error) {
                    console.log(error);
                })
            },
//上传商品logo图片
            uploadFile4(file) {
                this.fileData4.append('iconFile', file.file);
                console.log(this.fileData4.get("iconFile"))
            },
//确定上传
            submitUpload4() {
                this.fileData4 = new FormData();
                this.$refs.upload4.submit();
                var self = this
                uploadGoodsIcon(this.fileData4).then(function (response) {
                    self.$refs.upload4.clearFiles();
                    self.$message({
                        message: '上传成功',
                        type: 'success'
                    });
                    self.goodDataForm.picUrl = uploadHeaderPath + response.data.data[0]
                    self.uploadlogoUrl_good = response.data.data[0]
                    console.log(self.goodDataForm.picUrl)
                })
                .catch(function (error) {
                    console.log(error);
                })
            },
//删除图片
            deletePic(index, picId) {
                this.dataForm.pictures.splice(index, 1)
                this.dataForm.deleteList.push(picId)
            },
//状态改成汉字
            formatterColumn(row) {
                switch (row.type) {
                    case 0:
                        return '健康';
                        break;

                    case 1:
                        return '时尚';
                        break;

                    case 2:
                        return '服务';
                        break;

                    case 3:
                        return '乐器';
                        break;

                    case 4:
                        return '饮食';
                        break;

                    default:
                        return '未知';
                }
            },
//获取商家列表
            getList() {
                this.listLoading = true
                listBrand(this.listQuery)
                .then(response => {
                    console.log(response)
                    this.list = response.data.data.items
                    for (var i in this.list) {
                        if (this.list[i].logoUrl.substr(0, 4) != 'http') {
                            this.list[i].logoUrl = uploadHeaderPath + this.list[i].logoUrl
                        }
                        if (this.list[i].pictures) {
                            for (var j in this.list[i].pictures) {
                                if (this.list[i].pictures[j].picUrl.substr(0, 4) != 'http') {
                                    this.list[i].pictures[j].picUrl = uploadHeaderPath + this.list[i].pictures[j].picUrl
                                }
                            }
                        }
                    }
                    this.total = response.data.data.total
                    this.listLoading = false
                })
                .catch(() => {
                    this.list = []
                    this.total = 0
                    this.listLoading = false
                })
            },
//获取商家类目列表
            listBrandType() {
                this.typeMap = new Map()
                listBrandType(this.listBrandTypeQuery).then(response => {
                    this.brandTypes = response.data.data.items


                })
                .catch(() => {

                })
            },
            handleFilter() {
                this.listQuery.page = 1
                this.getList()
            },
            resetForm() {
                this.dataForm = {
                    id: undefined,
                    name: '',
                    desc: '',
                    type: '',
                    openTime: undefined,
                    phoneNumPrimary: undefined,
                    address: undefined,
                    logoUrl: undefined,
                    pictures: [],
                    uploadList: [],
                    updateList: [],
                    deleteList: [],
                    longitude: undefined,
                    latitude: undefined
                }
            },
            //上传图片后更新显示
            resetForm1(dataForm) {
                this.dataForm = dataForm
            },
            handleCreate() {
                this.resetForm()
                this.dialogStatus = 'create'
                this.dialogFormVisible = true
                this.$nextTick(() => {
                    //this.$refs['dataForm'].clearValidate()
                    // var th=this
                    // var map = new BMap.Map('bmap',{enableMapClick:true});    // 创建Map实例
                    // map.centerAndZoom(new BMap.Point(104.06,30.67), 11);  // 初始化地图,设置中心点坐标和地图级别

                    // //添加地图类型控件
                    // map.addControl(new BMap.MapTypeControl({
                    //   mapTypes:[
                    //     BMAP_NORMAL_MAP,
                    //     BMAP_HYBRID_MAP
                    //   ]}));
                    // map.setCurrentCity("成都");          // 设置地图显示的城市 此项是必须设置的
                    // map.enableScrollWheelZoom(true);
                    // var auto = new BMap.Autocomplete({
                    //                  "input": "suggestId",
                    //                   "location": map
                    //             })
                    // //console.log(auto)
                    // var myValue
                    //             //鼠标点击下拉列表后的事件
                    // auto.addEventListener("onconfirm", function (e) {
                    //   var _value = e.item.value;
                    //   //console.log('ee'+_value)
                    //   myValue = _value.province + _value.city + _value.district + _value.street + _value.business;
                    //                //this.address_detail = myValue
                    //   th.dataForm.address=myValue;
                    //   setPlace();
                    // });

                    // function setPlace() {
                    //   //清除地图上所有覆盖物
                    //   map.clearOverlays();
                    //   function myFun() {
                    //   //获取第一个智能搜索的结果
                    //     console.log('aa'+local.getResults().getPoi(0).point);
                    //     th.dataForm.latitude=local.getResults().getPoi(0).point.lat;
                    //     th.dataForm.longitude=local.getResults().getPoi(0).point.lng;
                    //     //console.log(th.dataForm.longitude);
                    //     //this.userlocation = local.getResults().getPoi(0).point;
                    //     // map.centerAndZoom(local.getResults().getPoi(0).point, 18);
                    //     // //添加标注
                    //     // map.addOverlay(new BMap.Marker(local.getResults().getPoi(0).point));
                    //     }

                    //     //智能搜索
                    //     // var local = new BMap.LocalSearch(map, {
                    //     //   onSearchComplete: myFun
                    //     //   });
                    //     // local.search(myValue);

                    //                 //测试输出坐标（指的是输入框最后确定地点的经纬度）
                    //                 // map.addEventListener("click",function(e){
                    //                 //     //经度
                    //                 //     console.log(this.userlocation.lng);
                    //                 //     //维度
                    //                 //     console.log(this.userlocation.lat);
                    //                 // })
                    // }
                })
            },
            focus() {
                var th = this
                var map = new BMap.Map('bmap', {enableMapClick: true});    // 创建Map实例
                map.centerAndZoom(new BMap.Point(104.06, 30.67), 11);  // 初始化地图,设置中心点坐标和地图级别

                //添加地图类型控件
                map.addControl(new BMap.MapTypeControl({
                    mapTypes: [
                        BMAP_NORMAL_MAP,
                        BMAP_HYBRID_MAP
                    ]
                }));
                map.setCurrentCity("成都");          // 设置地图显示的城市 此项是必须设置的
                map.enableScrollWheelZoom(true);
                var auto = new BMap.Autocomplete({
                    "input": "suggestId",
                    "location": map
                })
                //console.log(auto)
                var myValue
                //鼠标点击下拉列表后的事件
                auto.addEventListener("onconfirm", function (e) {
                    var _value = e.item.value;
                    //console.log('ee'+_value)
                    myValue = _value.province + _value.city + _value.district + _value.street + _value.business;
                    //this.address_detail = myValue
                    //th.dataForm.address = myValue;
                    th.dataForm.mapAddress = myValue;


                    setPlace();
                    auto = undefined;
                });

                function setPlace() {
                    //清除地图上所有覆盖物
                    map.clearOverlays();

                    function myFun() {
                        //获取第一个智能搜索的结果
                        console.log('aa' + local.getResults().getPoi(0).point);
                        th.dataForm.latitude = local.getResults().getPoi(0).point.lat;
                        th.dataForm.longitude = local.getResults().getPoi(0).point.lng;
                        //console.log(th.dataForm.longitude);
                        //this.userlocation = local.getResults().getPoi(0).point;
                        // map.centerAndZoom(local.getResults().getPoi(0).point, 18);
                        // //添加标注
                        // map.addOverlay(new BMap.Marker(local.getResults().getPoi(0).point));
                    }

                    //智能搜索
                    var local = new BMap.LocalSearch(map, {
                        onSearchComplete: myFun
                    });
                    local.search(myValue);

                    //测试输出坐标（指的是输入框最后确定地点的经纬度）
                    // map.addEventListener("click",function(e){
                    //     //经度
                    //     console.log(this.userlocation.lng);
                    //     //维度
                    //     console.log(this.userlocation.lat);
                    // })
                }


            },
            createData() {
                this.dataForm.logoUrl = this.uploadlogoUrl
                console.log(this.dataForm)
                //this.dataForm.uploadList.push(row.id)
                //this.delete.brandIds=this.deletelist
                this.$refs['dataForm'].validate(valid => {
                    if (valid) {
                        createBrand(this.dataForm)
                        .then(response => {
                            this.list.unshift(response.data.data)
                            this.dialogFormVisible = false
                            this.$notify.success({
                                title: '成功',
                                message: '创建成功'
                            })
                            this.getList()
                        })
                        .catch(response => {
                            this.$notify.error({
                                title: '失败',
                                message: response.data.errmsg
                            })
                        })
                    }
                })

            },
            handleUpdate(row) {
                this.dataForm = Object.assign({}, row)
                this.dataForm.deleteList = []
                this.dataForm.uploadList = []
                this.dialogStatus = 'update'
                this.dialogFormVisible = true
                this.$nextTick(() => {
                    // this.$refs['dataForm'].clearValidate()
                    // var th=this
                    // var map = new BMap.Map('bmap',{enableMapClick:true});    // 创建Map实例
                    // //map.centerAndZoom(new BMap.Point(104.06,30.67), 11);  // 初始化地图,设置中心点坐标和地图级别

                    // //添加地图类型控件
                    // map.addControl(new BMap.MapTypeControl({
                    //   mapTypes:[
                    //     BMAP_NORMAL_MAP,
                    //     BMAP_HYBRID_MAP
                    //   ]}));
                    // map.setCurrentCity("成都");          // 设置地图显示的城市 此项是必须设置的
                    // map.enableScrollWheelZoom(true);
                    // var auto = new BMap.Autocomplete({
                    //                  "input": "suggestId",
                    //                   "location": map
                    //             })
                    // //console.log(auto)
                    // var myValue
                    //             //鼠标点击下拉列表后的事件
                    // auto.addEventListener("onconfirm", function (e) {
                    //   var _value = e.item.value;
                    //   console.log('ee'+_value)
                    //   myValue = _value.province + _value.city + _value.district + _value.street + _value.business;
                    //                //this.address_detail = myValue
                    //   th.dataForm.address=myValue;
                    //   setPlace();
                    // });

                    // function setPlace() {
                    //   //清除地图上所有覆盖物
                    //   map.clearOverlays();
                    //   function myFun() {
                    //   //获取第一个智能搜索的结果
                    //     //console.log(local.getResults().getPoi(0).point);
                    //     th.dataForm.latitude=local.getResults().getPoi(0).point.lat;
                    //     th.dataForm.longitude=local.getResults().getPoi(0).point.lng;
                    //     console.log(th.dataForm.longitude);
                    //     //this.userlocation = local.getResults().getPoi(0).point;
                    //     // map.centerAndZoom(local.getResults().getPoi(0).point, 18);
                    //     // //添加标注
                    //     // map.addOverlay(new BMap.Marker(local.getResults().getPoi(0).point));
                    //     }

                    //     //智能搜索
                    //     var local = new BMap.LocalSearch(map, {
                    //       onSearchComplete: myFun
                    //       });
                    //     local.search(myValue);

                    //                 //测试输出坐标（指的是输入框最后确定地点的经纬度）
                    //                 // map.addEventListener("click",function(e){
                    //                 //     //经度
                    //                 //     console.log(this.userlocation.lng);
                    //                 //     //维度
                    //                 //     console.log(this.userlocation.lat);
                    //                 // })
                    // }
                })
            },
            updateData() {
                if (this.uploadlogoUrl) {
                    this.dataForm.logoUrl = this.uploadlogoUrl
                }
                this.$refs['dataForm'].validate(valid => {
                    if (valid) {
                        console.log(this.dataForm)
                        updateBrand(this.dataForm)
                        .then(() => {
                            for (const v of this.list) {
                                if (v.id === this.dataForm.id) {
                                    const index = this.list.indexOf(v)
                                    this.list.splice(index, 1, this.dataForm)
                                    break
                                }
                            }
                            this.dialogFormVisible = false
                            this.$notify.success({
                                title: '成功',
                                message: '更新成功'
                            })
                            this.getList()
                        })
                        .catch(response => {
                            this.$notify.error({
                                title: '失败',
                                message: response.data.errmsg
                            })
                        })
                    }
                })

            },
            handleDelete(row) {
                this.deletelist.push(row.id)
                deleteBrand(this.deletelist).then(response => {
                    this.$notify.success({
                        title: '成功',
                        message: '删除成功'
                    })
                    const index = this.list.indexOf(row)
                    this.list.splice(index, 1)
                })
                .catch(response => {
                    this.$notify.error({
                        title: '失败',
                        message: response.data.errmsg
                    })
                })
            },
            handleCreatGoods(row) {
                this.goodDataForm.brandId = row.id
                this.goodDialogVisible = true
                this.$nextTick(() => {
                    this.$refs['goodDataForm'].clearValidate()
                })
            },
            createGoodData() {
                console.log(this.goodDataForm)
                this.goodDataForm.counterPrice = parseFloat(this.goodDataForm.counterPrice)
                this.goodDataForm.picUrl = this.uploadlogoUrl_good
                this.$refs['goodDataForm'].validate(valid => {
                    if (valid) {
                        console.log(valid)
                        publishGoods(this.goodDataForm)
                        .then(response => {
                            this.list.unshift(response.data.data)
                            this.goodDialogVisible = false
                            this.$notify.success({
                                title: '成功',
                                message: '添加成功'
                            })
                        })
                        .catch(response => {
                            this.$notify.error({
                                title: '失败',
                                message: response.data.errmsg
                            })
                        })
                    }
                })
            },
            handleDownload() {
                this.downloadLoading = true
                import('@/vendor/Export2Excel').then(excel => {
                    const tHeader = [
                        '商家ID',
                        '商家名称',
                        '商家简介',
                        '商家类型',
                        '营业时间',
                        '联系方式',
                        '地址'
                    ]
                    const filterVal = ['id', 'name', 'desc', 'type', 'openTime', 'phoneNumPrimary', 'address']
                    excel.export_json_to_excel2(
                        tHeader,
                        this.list,
                        filterVal,
                        '商家信息'
                    )
                    this.downloadLoading = false
                })
            },
             //多选
            handleSelectionChange: function (val) {
                this.selectionList = val;
            },
            //批量删除
            handleSelectionDelete: function () {
                this.deletelist = [];
                for(let i =0;i<this.selectionList.length;i++){
                    this.deletelist.push(this.selectionList[i].id)
                }

                if(this.deletelist.length==0){
                    this.$notify.error({
                        title: '失败',
                        message: "请选择要删除的记录"
                    })
                }else{
                    deleteBrand(this.deletelist).then(response => {
                    this.$notify.success({
                        title: '成功',
                        message: '删除成功'
                    })
                    this.getList()
                }).catch(response => {
                    this.$notify.error({
                        title: '失败',
                        message: response.data.errmsg
                    })
                })
                }

            }
        },
        watch:{
          'listQuery.id':function(val,oldVal){
            if(!val){
              this.getList()
            }
          },
          'listQuery.name':function(val,oldVal){
            if(!val){
              this.getList()
            }
          },
          'listQuery.types':function(val,oldVal){
            if(!val){
              this.getList()
            }
          }
        }
    }
</script>
